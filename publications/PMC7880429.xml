<?xml version="1.0" encoding="UTF-8"?>
<OAI-PMH xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2022-03-11T00:58:08Z</responseDate>
  <request verb="GetRecord" identifier="oai:pubmedcentral.nih.gov:7880429" metadataPrefix="pmc">https:/www.ncbi.nlm.nih.gov/pmc/oai/oai.cgi</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:pubmedcentral.nih.gov:7880429</identifier>
        <datestamp>2021-02-19</datestamp>
        <setSpec>plosone</setSpec>
        <setSpec>pmc-open</setSpec>
      </header>
      <metadata>
        <article xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ali="http://www.niso.org/schemas/ali/1.0/" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="https://jats.nlm.nih.gov/ns/archiving/1.3/ https://jats.nlm.nih.gov/archiving/1.3/xsd/JATS-archivearticle1-3.xsd" article-type="research-article">
          <front>
            <journal-meta>
              <journal-id journal-id-type="nlm-ta">PLoS One</journal-id>
              <journal-id journal-id-type="iso-abbrev">PLoS One</journal-id>
              <journal-id journal-id-type="publisher-id">plos</journal-id>
              <journal-id journal-id-type="pmc">plosone</journal-id>
              <journal-title-group>
                <journal-title>PLoS ONE</journal-title>
              </journal-title-group>
              <issn pub-type="epub">1932-6203</issn>
              <publisher>
                <publisher-name>Public Library of Science</publisher-name>
                <publisher-loc>San Francisco, CA USA</publisher-loc>
              </publisher>
            </journal-meta>
            <article-meta>
              <article-id pub-id-type="accession">PMC7880429</article-id>
              <article-id pub-id-type="pmcid">PMC7880429</article-id>
              <article-id pub-id-type="pmc-uid">7880429</article-id>
              <article-id pub-id-type="pmid">33577564</article-id>
              <article-id pub-id-type="publisher-id">PONE-D-21-00312</article-id>
              <article-id pub-id-type="doi">10.1371/journal.pone.0246961</article-id>
              <article-categories>
                <subj-group subj-group-type="heading">
                  <subject>Research Article</subject>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Computer and Information Sciences</subject>
                  <subj-group>
                    <subject>Network Analysis</subject>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Medicine and Health Sciences</subject>
                  <subj-group>
                    <subject>Epidemiology</subject>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Medicine and Health Sciences</subject>
                  <subj-group>
                    <subject>Epidemiology</subject>
                    <subj-group>
                      <subject>Infectious Disease Epidemiology</subject>
                    </subj-group>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Medicine and Health Sciences</subject>
                  <subj-group>
                    <subject>Medical Conditions</subject>
                    <subj-group>
                      <subject>Infectious Diseases</subject>
                      <subj-group>
                        <subject>Infectious Disease Epidemiology</subject>
                      </subj-group>
                    </subj-group>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Physical Sciences</subject>
                  <subj-group>
                    <subject>Mathematics</subject>
                    <subj-group>
                      <subject>Applied Mathematics</subject>
                      <subj-group>
                        <subject>Algorithms</subject>
                      </subj-group>
                    </subj-group>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Research and Analysis Methods</subject>
                  <subj-group>
                    <subject>Simulation and Modeling</subject>
                    <subj-group>
                      <subject>Algorithms</subject>
                    </subj-group>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Research and Analysis Methods</subject>
                  <subj-group>
                    <subject>Simulation and Modeling</subject>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Biology and Life Sciences</subject>
                  <subj-group>
                    <subject>Veterinary Science</subject>
                    <subj-group>
                      <subject>Veterinary Diseases</subject>
                    </subj-group>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Physical Sciences</subject>
                  <subj-group>
                    <subject>Mathematics</subject>
                    <subj-group>
                      <subject>Probability Theory</subject>
                      <subj-group>
                        <subject>Markov Models</subject>
                      </subj-group>
                    </subj-group>
                  </subj-group>
                </subj-group>
                <subj-group subj-group-type="Discipline-v3">
                  <subject>Medicine and Health Sciences</subject>
                  <subj-group>
                    <subject>Pathology and Laboratory Medicine</subject>
                    <subj-group>
                      <subject>Pathogens</subject>
                    </subj-group>
                  </subj-group>
                </subj-group>
              </article-categories>
              <title-group>
                <article-title>Fast and principled simulations of the SIR model on temporal networks</article-title>
                <alt-title alt-title-type="running-head">Fast and principled simulations of the SIR model on temporal networks</alt-title>
              </title-group>
              <contrib-group>
                <contrib contrib-type="author">
                  <contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0003-2156-1096</contrib-id>
                  <name>
                    <surname>Holme</surname>
                    <given-names>Petter</given-names>
                  </name>
                  <role content-type="https://casrai.org/credit/">Conceptualization</role>
                  <role content-type="https://casrai.org/credit/">Formal analysis</role>
                  <role content-type="https://casrai.org/credit/">Funding acquisition</role>
                  <role content-type="https://casrai.org/credit/">Investigation</role>
                  <role content-type="https://casrai.org/credit/">Methodology</role>
                  <role content-type="https://casrai.org/credit/">Project administration</role>
                  <role content-type="https://casrai.org/credit/">Resources</role>
                  <role content-type="https://casrai.org/credit/">Software</role>
                  <role content-type="https://casrai.org/credit/">Validation</role>
                  <role content-type="https://casrai.org/credit/">Visualization</role>
                  <role content-type="https://casrai.org/credit/">Writing – original draft</role>
                  <role content-type="https://casrai.org/credit/">Writing – review &amp; editing</role>
                  <xref ref-type="aff" rid="aff001"/>
                  <xref ref-type="corresp" rid="cor001">*</xref>
                </contrib>
              </contrib-group>
              <aff id="aff001">
                <addr-line>Tokyo Tech World Research Hub Initiative (WRHI), Institute of Innovative Research, Tokyo Institute of Technology, Yokohama, Japan</addr-line>
              </aff>
              <contrib-group>
                <contrib contrib-type="editor">
                  <name>
                    <surname>Kryven</surname>
                    <given-names>Ivan</given-names>
                  </name>
                  <role>Editor</role>
                  <xref ref-type="aff" rid="edit1"/>
                </contrib>
              </contrib-group>
              <aff id="edit1">
                <addr-line>Utrecht University, NETHERLANDS</addr-line>
              </aff>
              <author-notes>
                <fn fn-type="COI-statement" id="coi001">
                  <p><bold>Competing Interests: </bold>The authors have declared that no competing interests exist.</p>
                </fn>
                <corresp id="cor001">* E-mail: <email>holme@cns.pi.titech.ac.jp</email></corresp>
              </author-notes>
              <pub-date pub-type="collection">
                <year>2021</year>
              </pub-date>
              <pub-date pub-type="epub">
                <day>12</day>
                <month>2</month>
                <year>2021</year>
              </pub-date>
              <volume>16</volume>
              <issue>2</issue>
              <elocation-id>e0246961</elocation-id>
              <history>
                <date date-type="received">
                  <day>22</day>
                  <month>1</month>
                  <year>2021</year>
                </date>
                <date date-type="accepted">
                  <day>28</day>
                  <month>1</month>
                  <year>2021</year>
                </date>
              </history>
              <permissions>
                <copyright-statement>© 2021 Petter Holme</copyright-statement>
                <copyright-year>2021</copyright-year>
                <copyright-holder>Petter Holme</copyright-holder>
                <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
                  <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
                </license>
              </permissions>
              <self-uri content-type="pdf" xlink:href="pone.0246961.pdf"/>
              <abstract>
                <p>The Susceptible–Infectious–Recovered (SIR) model is the canonical model of epidemics of infections that make people immune upon recovery. Many of the open questions in computational epidemiology concern the underlying contact structure’s impact on models like the SIR model. Temporal networks constitute a theoretical framework capable of encoding structures both in the networks of who could infect whom and when these contacts happen. In this article, we discuss the detailed assumptions behind such simulations—how to make them comparable with analytically tractable formulations of the SIR model, and at the same time, as realistic as possible. We also present a highly optimized, open-source code for this purpose and discuss all steps needed to make the program as fast as possible.</p>
              </abstract>
              <funding-group>
                <award-group id="award001">
                  <funding-source>
                    <institution-wrap>
                      <institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100001691</institution-id>
                      <institution>Japan Society for the Promotion of Science</institution>
                    </institution-wrap>
                  </funding-source>
                  <award-id>18H01655</award-id>
                  <principal-award-recipient>
                    <contrib-id authenticated="true" contrib-id-type="orcid">https://orcid.org/0000-0003-2156-1096</contrib-id>
                    <name>
                      <surname>Holme</surname>
                      <given-names>Petter</given-names>
                    </name>
                  </principal-award-recipient>
                </award-group>
                <funding-statement>P.H. was supported by JSPS KAKENHI Grant Number JP 18H01655. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
              </funding-group>
              <counts>
                <fig-count count="5"/>
                <table-count count="0"/>
                <page-count count="15"/>
              </counts>
              <custom-meta-group>
                <custom-meta id="data-availability">
                  <meta-name>Data Availability</meta-name>
                  <meta-value>The data can be downloaded from <ext-link ext-link-type="uri" xlink:href="http://www.sociopatterns.org/datasets/">http://www.sociopatterns.org/datasets/</ext-link>.</meta-value>
                </custom-meta>
              </custom-meta-group>
            </article-meta>
            <notes>
              <title>Data Availability</title>
              <p>The data can be downloaded from <ext-link ext-link-type="uri" xlink:href="http://www.sociopatterns.org/datasets/">http://www.sociopatterns.org/datasets/</ext-link>.</p>
            </notes>
          </front>
          <body>
            <sec sec-type="intro" id="sec001">
              <title>Introduction</title>
              <p>Infectious diseases constitute a significant burden to global health and will continue to be that for the foreseeable future. To aid policy-making, one needs to test scenarios and thus run epidemic simulations. Since such simulations rely on statistics—ideally comprising millions of simulated outbreaks—often epidemic simulations can be prohibitively slow. It is thus essential to have fast algorithms to simulate epidemics.</p>
              <p>The standard approach for epidemic modeling is <italic>compartmental models</italic> [<xref rid="pone.0246961.ref001" ref-type="bibr">1</xref>]. These are a class of models that divide a population into different classes with respect to the disease and assign transition rules between these classes. One of the most canonical of compartmental models is the susceptible–infectious–recovered (SIR) model that assumes a scenario where people get immune upon recovery.</p>
              <p>However, there is more to the story of how to simulate epidemic spreading than just compartmental models. The ways people come in contact so that the disease can spread is crucial for epidemics, so one should not neglect them [<xref rid="pone.0246961.ref002" ref-type="bibr">2</xref>]. There can be structures, or regularities, in the contact patterns that affect the disease propagation. One way of addressing this problem is to base the simulations on temporal networks [<xref rid="pone.0246961.ref003" ref-type="bibr">3</xref>–<xref rid="pone.0246961.ref005" ref-type="bibr">5</xref>]. These encode who that is in contact with whom, and when these contacts happen. Temporal network epidemiology has been applied to diseases from HIV [<xref rid="pone.0246961.ref006" ref-type="bibr">6</xref>] to influenza [<xref rid="pone.0246961.ref003" ref-type="bibr">3</xref>], from COVID-19 [<xref rid="pone.0246961.ref007" ref-type="bibr">7</xref>] to livestock diseases [<xref rid="pone.0246961.ref008" ref-type="bibr">8</xref>]. It should become even more useful with the increasing availability of large-scale data set [<xref rid="pone.0246961.ref009" ref-type="bibr">9</xref>].</p>
              <p>Simulating the SIR model on temporal networks may seem straightforward. One can run through contacts in order of time and let each contact be a potential infection event. Still, there are many details the modeler has to sort out: How should one initialize the epidemics? How should one deal with simultaneous contacts? These seemingly technical decisions do affect the result. They may rarely affect the experiments’ qualitative conclusions, but they could be large enough to hinder comparison between different studies. Thus, it is desirable for the temporal-network modelers to agree on the above details to arrive at such a full model description, motivated by simple principles. There could be situations where these principles are invalid, and thus a different version could be motivated, but we believe the decisions we discuss should not be glossed over.</p>
              <p>One goal for this paper is to establish an exact formulation of the SIR model in temporal networks, that could—like the Markovian SIR model on static networks—serve as a common ground for studying effects of temporal network structure, or a starting point when exploring special cases (for example what happens if the duration of infectiousness is broadly distributed). The other goal is to present an algorithm for simulating such a model.</p>
              <p>This paper will proceed by discussing the principles of a full SIR model for temporal networks, then present an algorithm for this purpose, and finally validate and evaluate the performance of this code.</p>
            </sec>
            <sec sec-type="materials|methods" id="sec002">
              <title>Methods</title>
              <p>In this section, we will discuss the considerations behind our precise formulation of the SIR model on temporal networks. We will also present and evaluate an algorithm to simulate this model. We assume temporal networks can be represented as a <italic>contact list</italic> [<xref rid="pone.0246961.ref010" ref-type="bibr">10</xref>]—a list of <italic>C</italic>
<italic>contacts</italic> (sometimes called “events”) (<italic>i</italic>, <italic>j</italic>, <italic>t</italic>), meaning that individuals <italic>i</italic> and <italic>j</italic> were in contact at time <italic>t</italic>. The order of the first two arguments does not matter. We will use <italic>N</italic> to represent the number of nodes; <italic>T</italic> to represent the duration of the data set (the time between the first and last contact). We call a pair of nodes with at least one contact an <italic>edge</italic>.</p>
              <sec id="sec003">
                <title>Design principles</title>
                <p>In a broad view, it is obvious how to simulate the SIR model on contact lists: One assigns one state—susceptible (S), infectious (I), or recovered (R)—to every individual. If a susceptible appears in contact with an infectious, the susceptible can become infectious with some probability. After some time, the infectious will recover. All temporal network studies using the SIR model follow these conventions [<xref rid="pone.0246961.ref004" ref-type="bibr">4</xref>]. However, when it comes to more subtle decisions, like how to initialize the network, there are many solutions in the literature. Some of these solutions are well-motivated, some are not. In either case, these inconsistencies between studies are undesirable.</p>
                <p>In constructing a complete specification for the SIR model on temporal networks, we will pursue the following design principles.</p>
                <list list-type="simple">
                  <list-item>
                    <p><bold>Realism</bold>. If our goal is to simulate reality, the first guiding principle should be to make a realistic model. At the same time, we are willing to compromise. The ultimate purpose of this type of computational epidemiology is not accurate forecasting, but to enable researchers to compare scenarios or interventions. For example, how can one best identify influential spreaders [<xref rid="pone.0246961.ref011" ref-type="bibr">11</xref>, <xref rid="pone.0246961.ref012" ref-type="bibr">12</xref>] or important contacts [<xref rid="pone.0246961.ref013" ref-type="bibr">13</xref>]? Therefore, we will not put this principle above the others.</p>
                  </list-item>
                  <list-item>
                    <p><bold>Continuity</bold>. To compare results from temporal network studies with other representational frameworks—like static network epidemiology or differential equations—our simulations should give the same results with the same assumptions. Static network epidemiology typically (often implicitly) assume the contacts to result from a Poisson process. This is mostly to ensure continuity to the well-mixed, Markovian SIR model—i.e., the most basic, textbook version [<xref rid="pone.0246961.ref001" ref-type="bibr">1</xref>, <xref rid="pone.0246961.ref014" ref-type="bibr">14</xref>]. So when we run our simulation on data with exponentially distributed interevent times (like a Poisson process), then we should get the same result as with SIR on static networks.</p>
                  </list-item>
                  <list-item>
                    <p><bold>Simplicity</bold>. The “continuity” principle itself entails many simplifications. The point of this design principle is to keep the same level of abstraction throughout the modeling. It means that the simulation components that do not concern the limit of static network epidemiology should be as simple as those that do.</p>
                  </list-item>
                  <list-item>
                    <p><bold>Generalizability</bold>. Another criterion (which in most cases overlap with simplicity), is that it should be possible to extend the model. Relaxing one of the assumptions—say that all contacts between susceptible and infectious are equally likely to spread the disease—should not conflict with another component of the model.</p>
                  </list-item>
                  <list-item>
                    <p><bold>Speed</bold>. The above principles suffice to derive most of our detailed formulation of the model. As a tiebreaker principle, we advocate choosing options that make the simulation as fast as possible.</p>
                  </list-item>
                </list>
              </sec>
              <sec id="sec004">
                <title>Precise model formulation</title>
                <p>As mentioned, we assume a population of <italic>n</italic> individuals whose contacts are described by a contact sequence. Every individual is in precisely one state S, I, or R. If <italic>i</italic> is infectious and <italic>j</italic> susceptible at time <italic>t</italic>, then a contact (<italic>i</italic>, <italic>j</italic>, <italic>t</italic>) can cause <italic>i</italic> to become infectious. An infectious individual will eventually recover.</p>
                <sec id="sec005">
                  <title>Mixed discrete and continuous times</title>
                  <p>In most empirical temporal networks, time is discretized. For example, the widely used Sociopatterns data report contacts at 20 seconds intervals [<xref rid="pone.0246961.ref015" ref-type="bibr">15</xref>]. The standard in static network epidemiology, on the other hand, is to use continuous time. This is necessary to make the model Markovian so that it reduces to the standard differential-equation version of the SIR model if the network is fully connected. Although this mix of discrete and continuous times may seem strange, it does not pose any technical or conceptual problem (cf. Ref. [<xref rid="pone.0246961.ref016" ref-type="bibr">16</xref>]). From a conceptual point of view, we can assume time is continuous—the contacts happen at integer times. It is easy, to extend the algorithm to handle floating point times. The main reason we use integer times internally is that almost all data set have times specified by integers. Note that the program still follows a continuous-time algorithm in the sense that it does not progress time step by time step.</p>
                </sec>
                <sec id="sec006">
                  <title>Contagion</title>
                  <p>We will assume that every contact represents the same probability <italic>β</italic> of the contagion (i.e., that a contact spreads the disease). In other words, we model the contagion as a Bernoulli process on the contacts with some additional conditions—a contagion takes place at the first non-zero event after a node pair becomes SI, if the involved nodes are still SI at the time of that event.</p>
                  <p>Relative to a true epidemic situation, these assumptions are radical simplifications since many effects could cause the transmission probability to vary: The amount of pathogens emitted by different infectious individuals, or at different times by the same individual, can vary greatly [<xref rid="pone.0246961.ref017" ref-type="bibr">17</xref>]. The susceptibility also varies much, not only between people but also e.g., with the time of the day [<xref rid="pone.0246961.ref018" ref-type="bibr">18</xref>, <xref rid="pone.0246961.ref019" ref-type="bibr">19</xref>]. Finally, our contact sequences do not encode the intensity of the contacts. Clearly, there is a good case for a more complex model of contagion events. The motivation we keep it this simple is the continuity principle.</p>
                  <p>In empirical data sets, nodes typically can have simultaneous contacts. With the assertion that the contagion is instantaneous in the SIR model, simultaneous contacts become a conceptual problem. A simple solution, and the one we advocate, is to prohibit the infection from spreading further than graph-distance one per time unit of the input data. In other words, if there are contacts (<italic>i</italic>, <italic>j</italic>, <italic>t</italic>) and (<italic>j</italic>, <italic>k</italic>, <italic>t</italic>), but no (<italic>i</italic>, <italic>k</italic>, <italic>t</italic>), then <italic>i</italic> cannot infect <italic>k</italic> (via <italic>j</italic>) at time <italic>t</italic>. This solution, technically speaking, makes the model a susceptible–exposed–infectious–recovered (SEIR) model where the exposed state lasts a time less than the data’s resolution. However, it simplifies the code a great deal and probably makes the simulation more realistic (since SEIR is always more accurate than SIR). Moreover, once again, except for some extreme cases, this decision will not significantly affect the output.</p>
                  <p>A different principle one could potentially follow would be to assume that the contacts happen at different (continuous) times but that these times have been truncated to integers. Then the principled approach would be to sample the contacts of nominally the same time in random order and average over different realizations of this random sampling [<xref rid="pone.0246961.ref020" ref-type="bibr">20</xref>]. This approach will make more sense if the data set’s time resolution is relatively low compared to the propagation of the disease. However, in such a case, one should probably instead consider a static network model since the temporal information would be less critical.</p>
                </sec>
                <sec id="sec007">
                  <title>Recovery</title>
                  <p>For the time to recovery <italic>δ</italic> ≥ 0, we simply follow the standard Markovian SIR model for static networks. I.e., we assume the recovery can be described by a Poisson process and thus we sample <italic>δ</italic> from an exponential distribution
<disp-formula id="pone.0246961.e001"><alternatives><graphic xlink:href="pone.0246961.e001.jpg" id="pone.0246961.e001g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M1"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mtext>Prob</mml:mtext><mml:mo>(</mml:mo><mml:mi>δ</mml:mi><mml:mo>)</mml:mo><mml:mo>=</mml:mo><mml:mi>ν</mml:mi><mml:mo form="prefix">exp</mml:mo><mml:mo>(</mml:mo><mml:mo>-</mml:mo><mml:mi>ν</mml:mi><mml:mi>δ</mml:mi><mml:mo>)</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(1)</label></disp-formula></p>
                  <p>If one represents times as integers internally, one needs to round the sampled times down to the nearest integer.</p>
                  <p>The duration of real infections is typically not exponentially distributed [<xref rid="pone.0246961.ref021" ref-type="bibr">21</xref>], so this is not a choice made for realism, but to conform to the standard in static network epidemiology. If one would want the recovery times to follow a particular distribution other than exponential, there is no problem to just replace the exponential random numbers when obtaining a recovery time. (This is unlike static network epidemiology where using a different distribution of recovery rate demands a different algorithm. [<xref rid="pone.0246961.ref022" ref-type="bibr">22</xref>]).</p>
                  <p>Some papers use a fixed time for the infection duration [<xref rid="pone.0246961.ref011" ref-type="bibr">11</xref>, <xref rid="pone.0246961.ref020" ref-type="bibr">20</xref>]. This does not simplify anything, it is probably not more realistic either, as realistic distributions of infectiousness tend to be peaked and skewed [<xref rid="pone.0246961.ref023" ref-type="bibr">23</xref>]. Furthermore, they could cause unrealistic threshold effects (when a gap in the contacts is very close to <italic>δ</italic>). So since there are no major advantages with this approach, exponentially distributed infection times must be preferable.</p>
                </sec>
                <sec id="sec008">
                  <title>Number of sources</title>
                  <p>For several reasons, we recommend starting the outbreak at one node, rather than many. The main reason for this is that medical epidemiology is usually concerned with the outbreak of one pathogen or entering the population, typically via one external (zoonotic) interaction, or arising from a mutation in one host. Starting the epidemics at different sources, one would be assuming that there had been some spreading outside of the considered network. In other words, that one is modeling an open system. In that case, one would also need to model the influx of pathogens during the outbreak, which adds another level of complexity to the problem.</p>
                  <p>Another conceptual problem with having many sources is how to choose them. Unfortunately, there is no rationale to follow that is both simple and consistent with fundamental epidemiological facts. If one, for example, is modeling bioterrorism, having many seeds could make sense. However, then a modeler needs to know whether the adversary chooses seeds to optimize the damage [<xref rid="pone.0246961.ref024" ref-type="bibr">24</xref>], just at random or in some cluster of the network.</p>
                  <p>Furthermore, and maybe most importantly, by using many sources, one misses the early die-outs characteristic of epidemic models [<xref rid="pone.0246961.ref020" ref-type="bibr">20</xref>] and presumably also real epidemics. An outbreak typically either dies very early or takes off to follow a predictable curve [<xref rid="pone.0246961.ref025" ref-type="bibr">25</xref>]. With several sources, the early die-offs become inaccessible.</p>
                  <p>Finally—and related to the previous point—with only one seed, one can measure the basic reproductive number <italic>R</italic><sub>0</sub> directly [<xref rid="pone.0246961.ref026" ref-type="bibr">26</xref>]. This is one of the most fundamental epidemiological quantities defined as the expected number of others that the source will infect. Note that one cannot avoid stochastic simulations to calculate this number because neighbors of the source could get infected by other nodes than the source and would not contribute to <italic>R</italic><sub>0</sub>.</p>
                </sec>
                <sec id="sec009">
                  <title>Initialization</title>
                  <p>Now that we established the need for only one infection source, then how should we choose it? In the spirit of simplicity, we chose it with uniform randomness. This is also related to realism—there might be some correlation between network positions and the chance of acquiring a zoonotic infection. However, without additional knowledge, we cannot do better than choosing it randomly.</p>
                  <p>In the spirit of simplicity, we also choose the time of the infection uniformly at random between the beginning and end of the contact data set. Introducing the infection at a time related to features of the data—like the beginning of the data or when the seed enters the data—could introduce biases. Since the disease enters from the outside by a process unrelated to the SIR dynamics, we should randomly choose the time. Of course, there is a chance that the outbreak will start toward the end of the data set and thus not have enough time to spread far. Therefore optionally, one could choose the starting time randomly in an early time interval. Nevertheless, there is no simple rule to chose that interval. If the research purpose is to investigate the largest possible outbreaks, one must find such a rule, even though it has undesired consequences. Otherwise, we recommend picking an infection time by uniform randomness in [0, <italic>T</italic>). For the rest of the paper, we will follow that principle.</p>
                </sec>
                <sec id="sec010">
                  <title>Summary</title>
                  <p>Summarizing the above points, a precise formulation of the SIR model on contact sequences is as follows.</p>
                  <list list-type="simple">
                    <list-item>
                      <p><italic>Initialization</italic>. Initialize all individuals to susceptible.</p>
                    </list-item>
                    <list-item>
                      <p><italic>Seeding</italic>. Pick a random individual <italic>i</italic> and a random time <italic>t</italic><sub><italic>i</italic></sub> in the interval [0, <italic>T</italic>). At time <italic>t</italic><sub><italic>i</italic></sub>, infect <italic>i</italic>.</p>
                    </list-item>
                    <list-item>
                      <p><italic>Recovery</italic>. Whenever a node becomes infected, let it stay infected for an exponentially distributed time <italic>δ</italic> before it recovers.</p>
                    </list-item>
                    <list-item>
                      <p><italic>Contagion</italic>. If <italic>i</italic> got infected at time <italic>t</italic><sub><italic>i</italic></sub> and is still infected at time <italic>t</italic> &gt; <italic>t</italic><sub><italic>i</italic></sub>, and <italic>j</italic> is susceptible at time <italic>t</italic>, then a contact (<italic>i</italic>, <italic>j</italic>, <italic>t</italic>) will infect <italic>j</italic> with probability <italic>β</italic>.</p>
                    </list-item>
                  </list>
                </sec>
              </sec>
              <sec id="sec011">
                <title>Algorithm</title>
                <p>Now we describe the algorithm. The code, written in C and Python, is available at <ext-link ext-link-type="uri" xlink:href="http://github.com/pholme/tsir/">github.com/pholme/tsir/</ext-link>. This code is commented and written for clarity. Thus, we prioritize to describe the ideas rather than all the algorithmic details. We recommend the reader follow the actual code when reading this section.</p>
                <sec id="sec012">
                  <title>Straightforward algorithm</title>
                  <p>The simplest way of simulating the SIR model on a temporal network is to:</p>
                  <list list-type="order">
                    <list-item>
                      <p>Initialize all nodes as susceptible.</p>
                    </list-item>
                    <list-item>
                      <p>Run through the contacts in increasing order of time.</p>
                    </list-item>
                    <list-item>
                      <p>If a there is a contact between a susceptible and infectious node, then infect the susceptible node with probability <italic>β</italic>.</p>
                    </list-item>
                    <list-item>
                      <p>Whenever a node gets infected (including the source), then draw its time to recovery from an exponential distribution, and change its state to I.</p>
                    </list-item>
                    <list-item>
                      <p>Stop the simulation when there are no infectious nodes.</p>
                    </list-item>
                  </list>
                  <p>There are many tricks to speed up such a simulation. For example, one can use bisection search to find the first contact capable of spreading the disease (and thereby avoid scanning through all contacts before introducing the infection). Another trick is to note when individuals become inactive and stop the simulations when there are no active contacts. Still, the running time of this algorithm (above the epidemic threshold) will be linear in <italic>C</italic>. Now, consider the contacts between a pair of nodes. There could be thousands of these, but only one of them can spread the infection. So clearly, if we can identify that particular contact without having to scan through all contacts, that could make the algorithm much faster for denser data sets.</p>
                </sec>
                <sec id="sec013">
                  <title>Event-based algorithm</title>
                  <p>The more elaborate algorithm that we will discuss is inspired by the <italic>event-driven algorithm</italic> for SIR on static networks by Kiss, Miller and Simon [<xref rid="pone.0246961.ref002" ref-type="bibr">2</xref>].</p>
                  <p>To understand our algorithm, first consider a pair of nodes (<italic>i</italic>, <italic>j</italic>) and assume one of them, say <italic>i</italic>, gets infected at time <italic>t</italic><sub><italic>i</italic></sub>. Now assume no other nodes can infect <italic>j</italic> other than <italic>i</italic>. The infection process between <italic>i</italic> and <italic>j</italic> is then a Bernoulli process of a finite number of binary random variables with probability <italic>β</italic>. (Note that the corresponding part of the event-based algorithm for SIR on static networks is a Poisson process.) The number of Bernoulli random variables is the number <italic>n</italic><sub><italic>ij</italic></sub>(<italic>t</italic><sub><italic>i</italic></sub>) of contacts between <italic>i</italic> and <italic>j</italic> for <italic>t</italic> &gt; <italic>t</italic><sub><italic>i</italic></sub>. The probability that the <italic>k</italic>’th such contact will transmit the disease is given by
<disp-formula id="pone.0246961.e002"><alternatives><graphic xlink:href="pone.0246961.e002.jpg" id="pone.0246961.e002g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M2"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mi>β</mml:mi><mml:msup><mml:mrow><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>β</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mi>k</mml:mi><mml:mo>-</mml:mo><mml:mn>1</mml:mn></mml:mrow></mml:msup><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(2)</label></disp-formula>
One can sample such a random number <italic>k</italic> by
<disp-formula id="pone.0246961.e003"><alternatives><graphic xlink:href="pone.0246961.e003.jpg" id="pone.0246961.e003g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M3"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mo>⌊</mml:mo><mml:mfrac><mml:mrow><mml:mo form="prefix">log</mml:mo><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>X</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mrow><mml:mo form="prefix">log</mml:mo><mml:mo>(</mml:mo><mml:mn>1</mml:mn><mml:mo>-</mml:mo><mml:mi>β</mml:mi><mml:mo>)</mml:mo></mml:mrow></mml:mfrac><mml:mo>⌋</mml:mo><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(3)</label></disp-formula>
where <italic>X</italic> is a standard, uniformly distributed random variable <italic>X</italic> on the unit interval [0, 1). Note that the above operations take O(log <italic>c</italic>) time (for a list of <italic>c</italic> contacts between two nodes), compared to linear time for just scanning through the contacts.</p>
                  <p>To conveniently handle the above type of computations we store the temporal network internally as follows. First, we represent the temporal network projected to a static network in the standard adjacency list format. (Each node is a C-struct that contains information about its number of neighbors and who those neighbors are.) Then, for every neighbor in the neighbor list there is a sorted list of contacts. See <xref ref-type="fig" rid="pone.0246961.g001">Fig 1</xref> for an illustration and some further details.</p>
                  <fig id="pone.0246961.g001" orientation="portrait" position="float">
                    <object-id pub-id-type="doi">10.1371/journal.pone.0246961.g001</object-id>
                    <label>Fig 1</label>
                    <caption>
                      <title>Internal representation of the temporal network.</title>
                      <p>In this figure, panel B illustrates how the temporal network in panel A is represented internally. In A, we display a temporal network of four nodes (a, b, c, d), four edges ((a, b), (a, c), (a, d), (c, d)) and nine contacts ((a, b, 0), (a, c, 2), etc.). In panel B, the internal representation is organized by nodes. Every node has a list of neighbors (e.g., node a has the neighbor list (c, d, b)). For every neighbor, there is an ordered list of times of contacts with that neighbor (e.g. a has contact with c at times (2, 15, 19)). The neighbor lists are ordered in decreasing order of the last contact with that neighbor. This makes it possible to break iterations over neighbors if the infection time of a node is later than the last contact with the neighbor.</p>
                    </caption>
                    <graphic xlink:href="pone.0246961.g001"/>
                  </fig>
                  <p>Using the above strategy, when a node <italic>i</italic> gets infected, we can go through its neighbors <italic>j</italic> ∈ Γ<sub><italic>i</italic></sub>, and calculate if <italic>j</italic> could be infected by <italic>i</italic>, then which one of the contacts between <italic>i</italic> and <italic>j</italic> would transmit the disease. In the C code, this happens by calling a subroutine, <monospace>contagious-contact</monospace>, that takes <italic>i</italic>’s infection time <italic>t</italic><sub><italic>i</italic></sub> and the time-ordered list of contacts between <italic>i</italic> and <italic>j</italic>, <bold>t</bold><sub><italic>ij</italic></sub>, as input. Then proceed as follows:</p>
                  <list list-type="order">
                    <list-item>
                      <p>Use bisection search to find the smallest index <italic>k</italic> of <bold>t</bold><sub><italic>ij</italic></sub> such that <italic>t</italic><sub><italic>i</italic></sub> &lt; <bold>t</bold><sub><italic>ij</italic></sub>(<italic>k</italic>). Where <bold>t</bold><sub><italic>ij</italic></sub>(<italic>k</italic>) denotes the <italic>k</italic>’th contact of <bold>t</bold><sub><italic>ij</italic></sub>.</p>
                    </list-item>
                    <list-item>
                      <p>Add a random number <italic>K</italic> generated by <xref ref-type="disp-formula" rid="pone.0246961.e003">Eq 3</xref> to <italic>k</italic> and call it <italic>k</italic>′.</p>
                    </list-item>
                    <list-item>
                      <p>If <italic>k</italic>′ is larger than <bold>t</bold><sub><italic>ij</italic></sub>’s number of elements, then return some out-of-bounds value (to signal that no contact will spread the disease). Otherwise, return <italic>k</italic>′—the contact between <italic>i</italic> and <italic>j</italic> that could be contagious.</p>
                    </list-item>
                  </list>
                  <p>From the previous section, we can see that our code needs a priority queue—a data structure where one can quickly delete the smallest element and insert arbitrary elements. There are many ways to implement a priority queue. For our situation (where we have to delete, update, and add elements), operating a priority queue of length <italic>n</italic> has at least a complexity of O(log <italic>n</italic>). Among algorithms with this complexity, we use perhaps the simplest one—a <italic>binary heap</italic>. Apart from its simplicity, one appealing feature of using a binary heap for this problem is that updating the entry for an infected node already on the heap is very fast. Briefly speaking, updating a heap needs two types of sorting operations—<monospace>heap-up</monospace> and <monospace>heap-down</monospace>—where <monospace>heap-up</monospace> is much faster, and the only one needed to update elements already in the heap. We only use <monospace>heap-down</monospace> when we delete the smallest element.</p>
                  <p>The core of the code happens in a subroutine called <monospace>infect</monospace> that handles the infection of one node:</p>
                  <list list-type="order">
                    <list-item>
                      <p>Pop the individual <italic>i</italic> with the earliest infection time from the heap.</p>
                    </list-item>
                    <list-item>
                      <p>Iterate through the neighbors <italic>j</italic> of <italic>i</italic>.
<list list-type="alpha-lower"><list-item><p>If <italic>j</italic> is susceptible, get the time <italic>t</italic><sub><italic>j</italic></sub> when it would be infected by <italic>i</italic> (by calling <monospace>contagious-contact</monospace>).</p></list-item><list-item><p>If it simultaneously holds that
<list list-type="roman-lower"><list-item><p>There is no earlier infection event of <italic>j</italic> on the heap.</p></list-item><list-item><p><italic>i</italic>’s recovery time is not earlier than <italic>t</italic><sub><italic>j</italic></sub>.</p></list-item></list>
then put the contagion (<italic>i</italic> infects <italic>j</italic> at time <italic>t</italic><sub><italic>j</italic></sub>) on the heap.</p></list-item></list>
</p>
                    </list-item>
                  </list>
                  <p>A trick to speed the code up is to sort the neighbor list in decreasing order of time of the last contact—see <xref ref-type="fig" rid="pone.0246961.g001">Fig 1</xref>. In that way, we can break the iterations over neighbors (step 2) whenever we encounter a neighbor with which <italic>i</italic> has no future contacts).</p>
                  <p>Then the final structure of the program is simply:</p>
                  <list list-type="order">
                    <list-item>
                      <p>Read the network and initialize everything.</p>
                    </list-item>
                    <list-item>
                      <p>Infect the source node.</p>
                    </list-item>
                    <list-item>
                      <p>While there are any nodes left on the heap, call <monospace>infect</monospace>.</p>
                    </list-item>
                    <list-item>
                      <p>Reset the simulation.</p>
                    </list-item>
                    <list-item>
                      <p>Go to 2 until you have enough averages.</p>
                    </list-item>
                    <list-item>
                      <p>Evaluate the output.</p>
                    </list-item>
                  </list>
                </sec>
                <sec id="sec014">
                  <title>Further notes about the implementation</title>
                  <p>Our implementation of the above algorithm, available at <ext-link ext-link-type="uri" xlink:href="http://github.com/pholme/tsir/">github.com/pholme/tsir/</ext-link>, uses a mix of C and Python. The idea is to exploit C’s speed for the core routines and the many libraries of Python to simplify the pre- and post-processing. We have not made this into a full Python library because research building on this codebase would most likely need to add functionality on a low level. We have refrained from adding many imaginable measurements, both because it is hard to envision a sufficiently complete list of such, and it would slow down the program. We display an example output of the program in <xref ref-type="fig" rid="pone.0246961.g002">Fig 2</xref>.</p>
                  <fig id="pone.0246961.g002" orientation="portrait" position="float">
                    <object-id pub-id-type="doi">10.1371/journal.pone.0246961.g002</object-id>
                    <label>Fig 2</label>
                    <caption>
                      <title>Example output.</title>
                      <p>This heatmap shows the average outbreak size as a function of the model parameters. The raw data comes from the first day of sampling in Ref. [<xref rid="pone.0246961.ref027" ref-type="bibr">27</xref>]. It represents the proximity patterns of visitors to an art gallery.</p>
                    </caption>
                    <graphic xlink:href="pone.0246961.g002"/>
                  </fig>
                  <p>We use a 64-bit state version of the PCG (Permuted Congruential Generator) random number generator [<xref rid="pone.0246961.ref028" ref-type="bibr">28</xref>]. For this type of simulation, neither speed nor statistical quality of the random number generation is critical. For simplicity, we could just have used some lower-performance, library generator. Still, in the spirit of using state-of-the-art components, we opt for PCG. For some parameter values, it does save a few percent of computing time compared to popular random number generators of the previous generation (i.e., the Mersenne Twister).</p>
                </sec>
              </sec>
            </sec>
            <sec sec-type="results" id="sec015">
              <title>Results</title>
              <p>In this section, we go over some analysis of our temporal-network simulation program.</p>
              <sec id="sec016">
                <title>Validation</title>
                <p>We validate our event-based program by consistency checks in several ways. In this section, we will discuss some such checks—validation against the straightforward implementation and the analytical solution of the standard Markovian SIR model on static networks. As mentioned above, if the contacts are generated by a Poisson process on the edges—i.e., if they have exponentially distributed times between the contacts—then SIR on a temporal network and static network simulations should give the same results.</p>
                <p>For this test, we use the graph shown in <xref ref-type="fig" rid="pone.0246961.g003">Fig 3A</xref>. This graph has a complex behavior with respect to the SIR model. It is also small enough to solve exactly [<xref rid="pone.0246961.ref029" ref-type="bibr">29</xref>]—the expected outbreak size Ω as a function of <italic>β</italic> is
<disp-formula id="pone.0246961.e004"><alternatives><graphic xlink:href="pone.0246961.e004.jpg" id="pone.0246961.e004g" mimetype="image" position="anchor" orientation="portrait"/><mml:math id="M4"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mo>Ω</mml:mo><mml:mrow><mml:mo>(</mml:mo><mml:mi>β</mml:mi><mml:mo>)</mml:mo></mml:mrow><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mn>1176</mml:mn><mml:msup><mml:mi>β</mml:mi><mml:mn>10</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mn>8540</mml:mn><mml:msup><mml:mi>β</mml:mi><mml:mn>9</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mo>⋯</mml:mo><mml:mo>+</mml:mo><mml:mn>123</mml:mn><mml:mi>β</mml:mi><mml:mo>+</mml:mo><mml:mn>7</mml:mn></mml:mrow><mml:mrow><mml:mn>168</mml:mn><mml:msup><mml:mi>β</mml:mi><mml:mn>10</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mn>1316</mml:mn><mml:msup><mml:mi>β</mml:mi><mml:mn>9</mml:mn></mml:msup><mml:mo>+</mml:mo><mml:mo>⋯</mml:mo><mml:mo>+</mml:mo><mml:mn>105</mml:mn><mml:mi>β</mml:mi><mml:mo>+</mml:mo><mml:mn>7</mml:mn></mml:mrow></mml:mfrac><mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives><label>(4)</label></disp-formula></p>
                <fig id="pone.0246961.g003" orientation="portrait" position="float">
                  <object-id pub-id-type="doi">10.1371/journal.pone.0246961.g003</object-id>
                  <label>Fig 3</label>
                  <caption>
                    <title>Validation of the program.</title>
                    <p>Panel A shows a small graph with especially complex behavior with respect to the SIR model (and thus a good test case). Panel B shows the predicted outbreak size for the graph in A. The solid curve is the analytical solution. The symbols represent averages over 10<sup>6</sup> values for the straightforward and event-based algorithms, respectively.</p>
                  </caption>
                  <graphic xlink:href="pone.0246961.g003"/>
                </fig>
                <p>We add contacts to this graph’s edges by drawing exponential random numbers with the rate parameter one. We break these time series when they are longer than <italic>τ</italic> = 1000 (arbitrary units). This gives an expected number of 1000 contacts per edge. Since our code reads integer time stamps, and we want as high resolution as possible, we rescale the times so that <italic>T</italic> = 2<sup>32</sup> − 1 which guarantees there is no 32-bit integer overflow. Note that there is a trade-off: If we have too many contacts per link, then the distribution of inter-event times gets further from exponential. If we have too few contacts per link, there is a higher chance the outbreak will not die by the end of the data set. We use <italic>ν</italic> = 1 and average over 10<sup>6</sup> runs of the algorithms and 100 realizations of the generation of time-stamps. Even with these caveats, <italic>Ω</italic> from the temporal network simulation is statistically indistinguishable from the exact values from the static network version (standard scores between 0.5 and 2). Furthermore, the straightforward algorithm and the event-based algorithm are also indistinguishable.</p>
              </sec>
              <sec id="sec017">
                <title>Time complexity</title>
                <p>The worst-case complexity of the event-driven algorithm is <italic>O</italic>(<italic>n</italic><sup>2</sup> log <italic>n</italic> log <italic>C</italic>) for a dense network (where <italic>C</italic> is the number of contacts). Each node has to enter and exit the priority queue (a factor <italic>n</italic> log <italic>n</italic>). For an infected node, all the neighbors need to be scanned (another factor <italic>n</italic>). Then for each neighbor, the infecting contact needs to be identified (in a worst case this has a complexity log <italic>C</italic>). Most real networks of interest are sparse—i.e. the degrees are bounded, giving the complexity <italic>O</italic>(<italic>n</italic> log <italic>n</italic> log <italic>C</italic>)—and has <italic>C</italic> ≫ <italic>n</italic>.</p>
                <p>The straightforward implementation is <italic>O</italic>(<italic>C</italic> + <italic>n</italic>) in a worst case, and should be slower as long as <italic>C</italic> is sufficiently large. Conversely one could construct temporal networks where the straightforward algorithm is faster—make a list of one contact per node pair for all node pairs, then repeat the same list after the first. Is such a temporal network the number of links nodes is maximal and the number of contacts per link is low. Furthermore, every node is reachable from every other. This should be a case where the straightforward algorithm outperforms the event-based one. However, empirical temporal networks typically look very different with very large <italic>C</italic> values and relative low reachabilities—i.e. many node pairs are unreachable due to the constraint that paths have to follow increasing time stamps reduces the outbreak sizes, so that a large part of the network will never be reached even in a worst case. In the event-based simulations, the program does not need to evaluate contacts in these unreachable parts of the networks, which contributes to its speed in practice. Many other factors affect the running time. For example, the earlier the outbreaks die, or the smaller they get, the shorter are the execution times. For these reasons, it is challenging to make a complete theory of these algorithms’ relative running times for practical parameter values.</p>
              </sec>
              <sec id="sec018">
                <title>Evaluation</title>
                <p>To evaluate the speed of our event-based algorithm, we use artificial temporal networks. We generate these in a similar way to the ones used to check the limit to the static network SIR model described in the previous section. The difference is that we here use random graphs—the standard Erdős-Rényi or <italic>G</italic>(<italic>n</italic>, <italic>p</italic>) model [<xref rid="pone.0246961.ref030" ref-type="bibr">30</xref>]—and Barabási-Albert models as the underlying structure. Then we put time series of contacts, with inter-event times drawn from an exponential distribution, on the edges.</p>
                <p>We compare our event-driven algorithm to the straightforward method. For a fair comparison, we employ all simple optimizations that we can think of for both programs—such as bisection search to find the earliest contact after the beginning of the epidemics. We report the times of the disease simulation, i.e. excluding the time to read the data and fill up the data structures (which is not the bottleneck of the program).</p>
                <p>In our first experiment—see <xref ref-type="fig" rid="pone.0246961.g004">Fig 4</xref>—we check the relative speed-up for the same data set as in <xref ref-type="fig" rid="pone.0246961.g002">Fig 2</xref>. We note that the event-based algorithm always outperforms the straightforward one, although the region of the parameter space where the speed-up is larger than around 3 is not that large. This region is at small transmission probabilities and small recover rates, i.e. the disease does not spread much, still it does not die out. In this case, the straightforward algorithm still has to go through all contacts, whereas the event-driven algorithm just has to go through the few ones that get infected.</p>
                <fig id="pone.0246961.g004" orientation="portrait" position="float">
                  <object-id pub-id-type="doi">10.1371/journal.pone.0246961.g004</object-id>
                  <label>Fig 4</label>
                  <caption>
                    <title>Speed-up relative to the straightforward algorithm for an artificial network as a function of the SIR model parameters.</title>
                    <p>How many times faster the event-driven program is compared to the reference code for the same data set as in <xref ref-type="fig" rid="pone.0246961.g002">Fig 2</xref>. The minimum value of the speed-up in this figure is 2.8.</p>
                  </caption>
                  <graphic xlink:href="pone.0246961.g004"/>
                </fig>
                <p>In our second experiment, we use 10<sup>3</sup> temporal networks for averages, and 10<sup>6</sup> outbreak simulations per network. We chose the parameter values in such a way that the outbreak sizes should be intermediate. In <xref ref-type="fig" rid="pone.0246961.g005">Fig 5</xref>, we show the speed-up—the execution time of the straightforward implementation divided by the time of the event-driven simulation. We ran the simulations on a workstation with dual AMD EPYC 7552 CPUs, 256Gb RAM memory and 192 logical cores (at least half were idle during the experiment).</p>
                <fig id="pone.0246961.g005" orientation="portrait" position="float">
                  <object-id pub-id-type="doi">10.1371/journal.pone.0246961.g005</object-id>
                  <label>Fig 5</label>
                  <caption>
                    <title>Speed-up relative to the straightforward algorithm of artificial networks.</title>
                    <p>How many times faster the event-driven program is compared to the reference code. The underlying temporal networks are Erdős-Rényi—ER, binomial random graphs, <italic>G</italic>(<italic>n</italic>, <italic>z</italic>/<italic>n</italic>) (where <italic>z</italic> is the average degree—for Barabási-Albert (BA) model networks [<xref rid="pone.0246961.ref030" ref-type="bibr">30</xref>]. We add exponential inter-event times to these static graphs (λ = 1/<italic>c</italic>) added until <italic>T</italic> is at least one. (Where λ is the usual, “rate parameter,” of the exponential distribution.) We use 10<sup>3</sup> temporal networks and 10<sup>6</sup> outbreak runs per set of parameter values. The recovery rate is <italic>ν</italic> = 1. Error bars (standard errors) would have been smaller than size of the symbols and thus not shown. Panel A shows the scaling of the speed-up as a function of the average number of contacts per link. Here <italic>n</italic> = 128 and <italic>z</italic> = 1024/<italic>c</italic> (to keep the number of contacts constant). Panel B displays the speed-up as a function of <italic>n</italic>. Here <italic>c</italic> = 512 and <italic>z</italic> = 2.</p>
                  </caption>
                  <graphic xlink:href="pone.0246961.g005"/>
                </fig>
                <p>As predicted, more contacts per edge increases the advantage (<xref ref-type="fig" rid="pone.0246961.g005">Fig 5A</xref>). To keep the total number of contact the same, we let the average degree be <italic>z</italic> = 1024/<italic>c</italic>. This means that for the largest values of <italic>c</italic> of the Erdős-Rényi model, the networks are fragmented, which explains the increase in the speed-up relative to the BA model (which never is fragmented). For fragmented networks, the event-based algorithm never needs to deal with connected components other than the one where the disease starts, which contributes to its speed.</p>
                <p>In <xref ref-type="fig" rid="pone.0246961.g005">Fig 5B</xref> we see that the speed-up has intermediate peaks both for the Erdős-Rényi and the Barabási-Albert models. Why the relative speed-up decays for larger <italic>n</italic> is hard to say. It is important to notice that the practical run times cannot be explained by any single parameter, not even output quantities like the average outbreak size or time to extinction. Rather the practical run times depend both on the progression of the simulated outbreak and properties of the network that do not affect the disease spreading. The most important message this study is the event-driven algorithm can in theory be arbitrarily faster than the straightforward one, and in practical situations it is, at least for some parameter values and data sets, faster. If computational speed is of utmost importance, we recommend a probe of the running times with the two algorithms. Code for such a comparison is available here <ext-link ext-link-type="uri" xlink:href="https://github.com/pholme/tsir_eval/">https://github.com/pholme/tsir_eval/</ext-link>.</p>
              </sec>
            </sec>
            <sec sec-type="conclusions" id="sec019">
              <title>Discussion and conclusion</title>
              <p>We have derived a principled detailed formulation of the SIR model on temporal networks and presented an, open-source simulation code for an event-based simulation of this model. We also a give platform for comparing the speed of the event-based algorithm with a more straightforward version (running through all contacts in order of time).</p>
              <p>The event-based algorithm that we proposed can be extended to many other compartmental models. As long as individuals do not reenter the susceptible state, it should be quite straightforward to extend our code. This would cover e.g., the SEIR model [<xref rid="pone.0246961.ref003" ref-type="bibr">3</xref>]. The only significant difference would be that one needs to put different types of events in the priority queue. For models like the SIS, where individuals can become susceptible again, it might be hard to write efficient event-driven code. For example, in this case, one can no longer discard potential infection events because they happen later than others. Probably other ideas for fast epidemic simulations could work better in this case [<xref rid="pone.0246961.ref031" ref-type="bibr">31</xref>].</p>
              <p>Another direction for future research would be to sacrifice some of the principles that we recommended to further increase the speed. One could, for example, use a fixed duration of the infectious stage [<xref rid="pone.0246961.ref011" ref-type="bibr">11</xref>]. In such a case, the gaps between the contacts determine whether an edge could transfer the infection. This, we speculate, could open for other types of fast algorithms. In general, temporal networks opens many intriguing problems for algorithm design. We recommend Ref. [<xref rid="pone.0246961.ref032" ref-type="bibr">32</xref>–<xref rid="pone.0246961.ref034" ref-type="bibr">34</xref>] for further inspiration.</p>
            </sec>
          </body>
          <back>
            <ack>
              <p>We thank Gordon Erlebacher and Martin Sterchi for constructive comments.</p>
            </ack>
            <ref-list>
              <title>References</title>
              <ref id="pone.0246961.ref001">
                <label>1</label>
                <mixed-citation publication-type="journal"><name><surname>Hethcote</surname><given-names>HW</given-names></name>. <article-title>The mathematics of infectious diseases</article-title>. <source>SIAM Rev</source>. <year>2000</year>;<volume>42</volume>(<issue>4</issue>):<fpage>599</fpage>–<lpage>653</lpage>. <pub-id pub-id-type="doi">10.1137/S0036144500371907</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref002">
                <label>2</label>
                <mixed-citation publication-type="book"><name><surname>Kiss</surname><given-names>IZ</given-names></name>, <name><surname>Miller</surname><given-names>JC</given-names></name>, <name><surname>Simon</surname><given-names>PL</given-names></name>. <source>Mathematics of Epidemics on Networks</source>. <publisher-loc>Cham</publisher-loc>: <publisher-name>Springer</publisher-name>; <year>2017</year>.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref003">
                <label>3</label>
                <mixed-citation publication-type="journal"><name><surname>Salathé</surname><given-names>M</given-names></name>, <name><surname>Kazandjieva</surname><given-names>M</given-names></name>, <name><surname>Lee</surname><given-names>JW</given-names></name>, <name><surname>Levis</surname><given-names>P</given-names></name>, <name><surname>Feldman</surname><given-names>MW</given-names></name>, <name><surname>Jones</surname><given-names>JH</given-names></name>. <article-title>A high-resolution human contact network for infectious disease transmission</article-title>. <source>Proc Natl Acad Sci USA</source>. <year>2010</year>;<volume>107</volume>(<issue>51</issue>):<fpage>22020</fpage>–<lpage>22025</lpage>. <pub-id pub-id-type="doi">10.1073/pnas.1009094108</pub-id>
<?supplied-pmid 21149721?><pub-id pub-id-type="pmid">21149721</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref004">
                <label>4</label>
                <mixed-citation publication-type="book"><name><surname>Masuda</surname><given-names>N</given-names></name>, <name><surname>Holme</surname><given-names>P</given-names></name>. <source>Temporal Network Epidemiology</source>. <publisher-loc>Springer</publisher-loc>: <publisher-name>Singapore</publisher-name>; <year>2017</year>.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref005">
                <label>5</label>
                <mixed-citation publication-type="journal"><name><surname>Masuda</surname><given-names>N</given-names></name>, <name><surname>Holme</surname><given-names>P</given-names></name>. <article-title>Predicting and controlling infectious disease epidemics using temporal networks</article-title>. <source>F1000 Prime Rep</source>. <year>2013</year>;<volume>5</volume>:<fpage>6</fpage>.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref006">
                <label>6</label>
                <mixed-citation publication-type="journal"><name><surname>Rocha</surname><given-names>LE</given-names></name>, <name><surname>Liljeros</surname><given-names>F</given-names></name>, <name><surname>Holme</surname><given-names>P</given-names></name>. <article-title>Simulated epidemics in an empirical spatiotemporal network of 50,185 sexual contacts</article-title>. <source>PLoS Comput Biol</source>. <year>2011</year>;<volume>7</volume>(<issue>3</issue>):<fpage>e1001109</fpage><pub-id pub-id-type="doi">10.1371/journal.pcbi.1001109</pub-id><pub-id pub-id-type="pmid">21445228</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref007">
                <label>7</label>
                <mixed-citation publication-type="journal"><name><surname>Barrat</surname><given-names>A</given-names></name>, <name><surname>Cattuto</surname><given-names>C</given-names></name>, <name><surname>Kivelä</surname><given-names>M</given-names></name>, <name><surname>Lehmann</surname><given-names>S</given-names></name>, <name><surname>Saramäki</surname><given-names>J</given-names></name>. <source>Effect of manual and digital contact tracing on COVID-19 outbreaks: a study on empirical contact data</source>; <year>2020</year>.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref008">
                <label>8</label>
                <mixed-citation publication-type="book"><name><surname>Schirdewahn</surname><given-names>F</given-names></name>, <name><surname>Colizza</surname><given-names>V</given-names></name>, <name><surname>Lentz</surname><given-names>HH</given-names></name>, <name><surname>Koher</surname><given-names>A</given-names></name>, <name><surname>Belik</surname><given-names>V</given-names></name>, <name><surname>Hövel</surname><given-names>P</given-names></name>. <chapter-title>Surveillance for outbreak detection in livestock-trade networks</chapter-title> In: <source>Temporal Network Epidemiology</source>. <publisher-name>Springer</publisher-name>; <year>2017</year> p. <fpage>215</fpage>–<lpage>240</lpage>.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref009">
                <label>9</label>
                <mixed-citation publication-type="journal"><name><surname>Sapiezynski</surname><given-names>P</given-names></name>, <name><surname>Stopczynski</surname><given-names>A</given-names></name>, <name><surname>Lassen</surname><given-names>DD</given-names></name>, <name><surname>Lehmann</surname><given-names>S</given-names></name>. <article-title>Interaction data from the Copenhagen networks study</article-title>. <source>Sci Dat</source>. <year>2019</year>;<volume>6</volume>:<fpage>315</fpage><pub-id pub-id-type="doi">10.1038/s41597-019-0325-x</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref010">
                <label>10</label>
                <mixed-citation publication-type="journal"><name><surname>Holme</surname><given-names>P</given-names></name>, <name><surname>Saramäki</surname><given-names>J</given-names></name>. <article-title>Temporal networks</article-title>. <source>Phys Rep</source>. <year>2012</year>;<volume>519</volume>(<issue>3</issue>):<fpage>97</fpage>–<lpage>125</lpage>. <pub-id pub-id-type="doi">10.1016/j.physrep.2012.03.001</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref011">
                <label>11</label>
                <mixed-citation publication-type="journal"><name><surname>Lee</surname><given-names>S</given-names></name>, <name><surname>Rocha</surname><given-names>LEC</given-names></name>, <name><surname>Liljeros</surname><given-names>F</given-names></name>, <name><surname>Holme</surname><given-names>P</given-names></name>. <article-title>Exploiting temporal network structures of human interaction to effectively immunize populations</article-title>. <source>PLOS One</source>. <year>2012</year>;<volume>7</volume>(<issue>5</issue>):<fpage>e36439</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0036439</pub-id><pub-id pub-id-type="pmid">22586472</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref012">
                <label>12</label>
                <mixed-citation publication-type="journal"><name><surname>Starnini</surname><given-names>M</given-names></name>, <name><surname>Machens</surname><given-names>A</given-names></name>, <name><surname>Cattuto</surname><given-names>C</given-names></name>, <name><surname>Barrat</surname><given-names>A</given-names></name>, <name><surname>Pastor-Satorras</surname><given-names>R</given-names></name>. <article-title>Immunization strategies for epidemic processes in time-varying contact networks</article-title>. <source>J Theor Biol</source>. <year>2013</year>;<volume>337</volume>:<fpage>89</fpage>–<lpage>100</lpage>. <pub-id pub-id-type="doi">10.1016/j.jtbi.2013.07.004</pub-id><pub-id pub-id-type="pmid">23871715</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref013">
                <label>13</label>
                <mixed-citation publication-type="journal"><name><surname>Takaguchi</surname><given-names>T</given-names></name>, <name><surname>Sato</surname><given-names>N</given-names></name>, <name><surname>Yano</surname><given-names>K</given-names></name>, <name><surname>Masuda</surname><given-names>N</given-names></name>. <article-title>Importance of individual events in temporal networks</article-title>. <source>New J Phys</source>. <year>2012</year>;<volume>14</volume>(<issue>9</issue>):<fpage>093003</fpage><pub-id pub-id-type="doi">10.1088/1367-2630/14/9/093003</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref014">
                <label>14</label>
                <mixed-citation publication-type="book"><name><surname>Andersson</surname><given-names>H</given-names></name>, <name><surname>Britton</surname><given-names>T</given-names></name>. <chapter-title>Stochastic Epidemic Models and Their Statistical Analysis</chapter-title><publisher-loc>New York</publisher-loc>: <publisher-name>Springer</publisher-name>; <year>2012</year>.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref015">
                <label>15</label>
                <mixed-citation publication-type="journal"><name><surname>Cattuto</surname><given-names>C</given-names></name>, <name><surname>Van den Broeck</surname><given-names>W</given-names></name>, <name><surname>Barrat</surname><given-names>A</given-names></name>, <name><surname>Colizza</surname><given-names>V</given-names></name>, <name><surname>Pinton</surname><given-names>J</given-names></name>, <name><surname>Vespignani</surname><given-names>A</given-names></name>. <article-title>Dynamics of Person-to-Person Interactions from Distributed RFID Sensor Networks</article-title>. <source>PLOS ONE</source>. <year>2010</year>;<volume>5</volume>(<issue>7</issue>):<fpage>e11596</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0011596</pub-id><pub-id pub-id-type="pmid">20657651</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref016">
                <label>16</label>
                <mixed-citation publication-type="journal"><name><surname>Böttcher</surname><given-names>L</given-names></name>, <name><surname>Antulov-Fantulin</surname><given-names>N</given-names></name>. <article-title>Unifying continuous, discrete, and hybrid susceptible-infected-recovered processes on networks</article-title>. <source>Phys Rev Research</source>. <year>2020</year>;<volume>2</volume>:<fpage>033121</fpage><pub-id pub-id-type="doi">10.1103/PhysRevResearch.2.033121</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref017">
                <label>17</label>
                <mixed-citation publication-type="journal"><name><surname>VanderWaal</surname><given-names>KL</given-names></name>, <name><surname>Ezenwa</surname><given-names>VO</given-names></name>. <article-title>Heterogeneity in pathogen transmission: mechanisms and methodology</article-title>. <source>Funct Ecol</source>. <year>2016</year>;<volume>30</volume>(<issue>10</issue>):<fpage>1606</fpage>–<lpage>1622</lpage>. <pub-id pub-id-type="doi">10.1111/1365-2435.12645</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref018">
                <label>18</label>
                <mixed-citation publication-type="journal"><name><surname>Bass</surname><given-names>J</given-names></name>, <name><surname>Lazar</surname><given-names>MA</given-names></name>. <article-title>Circadian time signatures of fitness and disease</article-title>. <source>Science</source>. <year>2016</year>;<volume>354</volume>(<issue>6315</issue>):<fpage>994</fpage>–<lpage>999</lpage>. <pub-id pub-id-type="doi">10.1126/science.aah4965</pub-id><pub-id pub-id-type="pmid">27885004</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref019">
                <label>19</label>
                <mixed-citation publication-type="journal"><name><surname>Colman</surname><given-names>E</given-names></name>, <name><surname>Spies</surname><given-names>K</given-names></name>, <name><surname>Bansal</surname><given-names>S</given-names></name>. <article-title>The reachability of contagion in temporal contact networks: how disease latency can exploit the rhythm of human behavior</article-title>. <source>BMC Infect Dis</source>. <year>2018</year>;<volume>18</volume>(<issue>1</issue>):<fpage>219</fpage><pub-id pub-id-type="doi">10.1186/s12879-018-3117-6</pub-id><pub-id pub-id-type="pmid">29764399</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref020">
                <label>20</label>
                <mixed-citation publication-type="journal"><name><surname>Holme</surname><given-names>P</given-names></name>. <article-title>Information content of contact-pattern representations and predictability of epidemic outbreaks</article-title>. <source>Sci Rep</source>. <year>2015</year>;<volume>5</volume>:<fpage>14462</fpage><pub-id pub-id-type="doi">10.1038/srep14462</pub-id><pub-id pub-id-type="pmid">26403504</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref021">
                <label>21</label>
                <mixed-citation publication-type="journal"><name><surname>Vergu</surname><given-names>E</given-names></name>, <name><surname>Busson</surname><given-names>H</given-names></name>, <name><surname>Ezanno</surname><given-names>P</given-names></name>. <article-title>Impact of the infection period distribution on the epidemic spread in a metapopulation model</article-title>. <source>PLOS One</source>. <year>2010</year>;<volume>5</volume>(<issue>2</issue>):<fpage>e9371</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0009371</pub-id><pub-id pub-id-type="pmid">20195473</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref022">
                <label>22</label>
                <mixed-citation publication-type="journal"><name><surname>Masuda</surname><given-names>N</given-names></name>, <name><surname>Rocha</surname><given-names>LE</given-names></name>. <article-title>A Gillespie algorithm for non-Markovian stochastic processes</article-title>. <source>SIAM Review</source>. <year>2018</year>;<volume>60</volume>(<issue>1</issue>):<fpage>95</fpage>–<lpage>115</lpage>. <pub-id pub-id-type="doi">10.1137/16M1055876</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref023">
                <label>23</label>
                <mixed-citation publication-type="journal"><name><surname>Krylova</surname><given-names>O</given-names></name>, <name><surname>Earn</surname><given-names>DJD</given-names></name>. <article-title>Effects of the infectious period distribution on predicted transitions in childhood disease dynamics</article-title>. <source>J Roy Soc Interface</source>. <year>2013</year>;<volume>10</volume>(<issue>84</issue>):<fpage>20130098</fpage><pub-id pub-id-type="doi">10.1098/rsif.2013.0098</pub-id><pub-id pub-id-type="pmid">23676892</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref024">
                <label>24</label>
                <mixed-citation publication-type="journal"><name><surname>Jankowski</surname><given-names>J</given-names></name>, <name><surname>Szymanski</surname><given-names>BK</given-names></name>, <name><surname>Kazienko</surname><given-names>P</given-names></name>, <name><surname>Michalski</surname><given-names>R</given-names></name>, <name><surname>Bródka</surname><given-names>P</given-names></name>. <article-title>Probing limits of information spread with sequential seeding</article-title>. <source>Sci Rep</source>. <year>2018</year>;<volume>8</volume>:<fpage>13996</fpage><pub-id pub-id-type="doi">10.1038/s41598-018-32081-2</pub-id><pub-id pub-id-type="pmid">30228338</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref025">
                <label>25</label>
                <mixed-citation publication-type="journal"><name><surname>Janson</surname><given-names>S</given-names></name>, <name><surname>Luczak</surname><given-names>M</given-names></name>, <name><surname>Windridge</surname><given-names>P</given-names></name>. <article-title>Law of large numbers for the SIR epidemic on a random graph with given degrees</article-title>. <source>Random Struct Algor</source>. <year>2014</year>;<volume>45</volume>(<issue>4</issue>):<fpage>726</fpage>–<lpage>763</lpage>. <pub-id pub-id-type="doi">10.1002/rsa.20575</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref026">
                <label>26</label>
                <mixed-citation publication-type="journal"><name><surname>Holme</surname><given-names>P</given-names></name>, <name><surname>Masuda</surname><given-names>N</given-names></name>. <article-title>The basic reproduction number as a predictor for epidemic outbreaks in temporal networks</article-title>. <source>PLOS One</source>. <year>2015</year>;<volume>10</volume>(<issue>3</issue>):<fpage>e0120567</fpage><pub-id pub-id-type="doi">10.1371/journal.pone.0120567</pub-id><pub-id pub-id-type="pmid">25793764</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref027">
                <label>37</label>
                <mixed-citation publication-type="journal"><name><surname>Van den Broeck</surname><given-names>W</given-names></name>, <name><surname>Quaggiotto</surname><given-names>M</given-names></name>, <name><surname>Isella</surname><given-names>L</given-names></name>, <name><surname>Barrat</surname><given-names>A</given-names></name>, <name><surname>Cattuto</surname><given-names>C</given-names></name>. <article-title>The making of sixty-nine days of close encounters at the Science Gallery</article-title>. <source>Leonardo</source>. <year>2012</year>;<volume>45</volume>(<issue>3</issue>):<fpage>285</fpage>–<lpage>285</lpage>. <pub-id pub-id-type="doi">10.1162/LEON_a_00377</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref028">
                <label>28</label>
                <mixed-citation publication-type="book"><name><surname>O’Neill</surname><given-names>ME</given-names></name>. <source>PCG: A family of simple fast space-efficient statistically good algorithms for random number generation</source>. <publisher-loc>Claremont, CA</publisher-loc>: <publisher-name>Harvey Mudd College</publisher-name>; <year>2014</year>. HMC-CS-2014-0905.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref029">
                <label>29</label>
                <mixed-citation publication-type="journal"><name><surname>Holme</surname><given-names>P</given-names></name>. <article-title>Three faces of node importance in network epidemiology: Exact results for small graphs</article-title>. <source>Phys Rev E</source>. <year>2017</year>;<volume>96</volume>(<issue>6</issue>):<fpage>062305</fpage><pub-id pub-id-type="doi">10.1103/PhysRevE.96.062305</pub-id><pub-id pub-id-type="pmid">29347435</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref030">
                <label>30</label>
                <mixed-citation publication-type="book"><name><surname>Newman</surname><given-names>MEJ</given-names></name>. <source>Networks: An Introduction</source>. <publisher-loc>Oxford UK</publisher-loc>: <publisher-name>Oxford University Press</publisher-name>; <year>2010</year>.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref031">
                <label>31</label>
                <mixed-citation publication-type="journal"><name><surname>St-Onge</surname><given-names>G</given-names></name>, <name><surname>Young</surname><given-names>JG</given-names></name>, <name><surname>Hébert-Dufresne</surname><given-names>L</given-names></name>, <name><surname>Dubé</surname><given-names>LJ</given-names></name>. <article-title>Efficient sampling of spreading processes on complex networks using a composition and rejection algorithm</article-title>. <source>Comput Phys Commun</source>. <year>2019</year>;<volume>240</volume>:<fpage>30</fpage>–<lpage>37</lpage>. <pub-id pub-id-type="doi">10.1016/j.cpc.2019.02.008</pub-id><pub-id pub-id-type="pmid">31708586</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref032">
                <label>32</label>
                <mixed-citation publication-type="journal"><name><surname>Badie-Modiri</surname><given-names>A</given-names></name>, <name><surname>Karsai</surname><given-names>M</given-names></name>, <name><surname>Kivelä</surname><given-names>M</given-names></name>. <article-title>Efficient limited-time reachability estimation in temporal networks</article-title>. <source>Phys Rev E</source>. <year>2020</year>;<volume>101</volume>:<fpage>052303</fpage><pub-id pub-id-type="doi">10.1103/PhysRevE.101.052303</pub-id><pub-id pub-id-type="pmid">32575201</pub-id></mixed-citation>
              </ref>
              <ref id="pone.0246961.ref033">
                <label>33</label>
                <mixed-citation publication-type="book"><name><surname>Himmel</surname><given-names>AS</given-names></name>, <name><surname>Bentert</surname><given-names>M</given-names></name>, <name><surname>Nichterlein</surname><given-names>A</given-names></name>, <name><surname>Niedermeier</surname><given-names>R</given-names></name>. <chapter-title>Efficient Computation of Optimal Temporal Walks Under Waiting-Time Constraints</chapter-title> In: <name><surname>Cherifi</surname><given-names>H</given-names></name>, <name><surname>Gaito</surname><given-names>S</given-names></name>, <name><surname>Mendes</surname><given-names>JF</given-names></name>, <name><surname>Moro</surname><given-names>E</given-names></name>, <name><surname>Rocha</surname><given-names>LM</given-names></name>, editors. <source>Complex Networks and Their Applications VIII</source>. <publisher-loc>Cham</publisher-loc>: <publisher-name>Springer</publisher-name>; <year>2020</year> p. <fpage>494</fpage>–<lpage>506</lpage>.</mixed-citation>
              </ref>
              <ref id="pone.0246961.ref034">
                <label>34</label>
                <mixed-citation publication-type="journal"><name><surname>Petrovic</surname><given-names>LV</given-names></name>, <name><surname>Scholtes</surname><given-names>I</given-names></name>. <source>Counting causal paths in big times series data on networks</source>; <year>2019</year>.</mixed-citation>
              </ref>
            </ref-list>
          </back>
          <sub-article id="pone.0246961.r001" article-type="editor-report">
            <front-stub>
              <article-id pub-id-type="doi">10.1371/journal.pone.0246961.r001</article-id>
              <title-group>
                <article-title>Decision Letter 0</article-title>
              </title-group>
              <contrib-group>
                <contrib contrib-type="author">
                  <name>
                    <surname>Kryven</surname>
                    <given-names>Ivan</given-names>
                  </name>
                  <role>Academic Editor</role>
                </contrib>
              </contrib-group>
              <permissions>
                <copyright-statement>© 2021 Ivan Kryven</copyright-statement>
                <copyright-year>2021</copyright-year>
                <copyright-holder>Ivan Kryven</copyright-holder>
                <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
                  <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
                </license>
              </permissions>
              <related-article id="rel-obj001" ext-link-type="doi" xlink:href="10.1371/journal.pone.0246961" related-article-type="reviewed-article"/>
              <custom-meta-group>
                <custom-meta>
                  <meta-name>Submission Version</meta-name>
                  <meta-value>0</meta-value>
                </custom-meta>
              </custom-meta-group>
            </front-stub>
            <body>
              <p>
                <named-content content-type="letter-date">29 Jan 2021</named-content>
              </p>
              <p>Fast and principled simulations of the SIR model on temporal networks</p>
              <p>PONE-D-21-00312</p>
              <p>Dear Dr. Holme,</p>
              <p>We’re pleased to inform you that your manuscript has been judged scientifically suitable for publication and will be formally accepted for publication once it meets all outstanding technical requirements.</p>
              <p>
                <bold>** In the final version of the manuscript, please correct the following: **</bold>
              </p>
              <p>The Equation (3) does not correspond to the form of the geometric distribution given in Equation (2). I believe there should be the ceiling operation instead of floor.</p>
              <p>Within one week, you’ll receive an e-mail detailing the required amendments. When these have been addressed, you’ll receive a formal acceptance letter and your manuscript will be scheduled for publication.</p>
              <p>An invoice for payment will follow shortly after the formal acceptance. To ensure an efficient process, please log into Editorial Manager at <ext-link ext-link-type="uri" xlink:href="http://www.editorialmanager.com/pone/">http://www.editorialmanager.com/pone/</ext-link>, click the 'Update My Information' link at the top of the page, and double check that your user information is up-to-date. If you have any billing related questions, please contact our Author Billing department directly at <email>authorbilling@plos.org</email>.</p>
              <p>If your institution or institutions have a press office, please notify them about your upcoming paper to help maximize its impact. If they’ll be preparing press materials, please inform our press team as soon as possible -- no later than 48 hours after receiving the formal acceptance. Your manuscript will remain under strict press embargo until 2 pm Eastern Time on the date of publication. For more information, please contact <email>onepress@plos.org</email>.</p>
              <p>Kind regards,</p>
              <p>Ivan Kryven</p>
              <p>Academic Editor</p>
              <p>PLOS ONE</p>
              <p>Additional Editor Comments (optional):</p>
              <p>Reviewers' comments:</p>
            </body>
          </sub-article>
          <sub-article id="pone.0246961.r002" article-type="editor-report">
            <front-stub>
              <article-id pub-id-type="doi">10.1371/journal.pone.0246961.r002</article-id>
              <title-group>
                <article-title>Acceptance letter</article-title>
              </title-group>
              <contrib-group>
                <contrib contrib-type="author">
                  <name>
                    <surname>Kryven</surname>
                    <given-names>Ivan</given-names>
                  </name>
                  <role>Academic Editor</role>
                </contrib>
              </contrib-group>
              <permissions>
                <copyright-statement>© 2021 Ivan Kryven</copyright-statement>
                <copyright-year>2021</copyright-year>
                <copyright-holder>Ivan Kryven</copyright-holder>
                <license xlink:href="http://creativecommons.org/licenses/by/4.0/">
                  <license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
                </license>
              </permissions>
              <related-article id="rel-obj002" ext-link-type="doi" xlink:href="10.1371/journal.pone.0246961" related-article-type="reviewed-article"/>
            </front-stub>
            <body>
              <p>
                <named-content content-type="letter-date">2 Feb 2021</named-content>
              </p>
              <p>PONE-D-21-00312 </p>
              <p>Fast and principled simulations of the SIR model on temporal networks </p>
              <p>Dear Dr. Holme:</p>
              <p>I'm pleased to inform you that your manuscript has been deemed suitable for publication in PLOS ONE. Congratulations! Your manuscript is now with our production department. </p>
              <p>If your institution or institutions have a press office, please let them know about your upcoming paper now to help maximize its impact. If they'll be preparing press materials, please inform our press team within the next 48 hours. Your manuscript will remain under strict press embargo until 2 pm Eastern Time on the date of publication. For more information please contact <email>onepress@plos.org</email>.</p>
              <p>If we can help with anything else, please email us at <email>plosone@plos.org</email>. </p>
              <p>Thank you for submitting your work to PLOS ONE and supporting open access. </p>
              <p>Kind regards, </p>
              <p>PLOS ONE Editorial Office Staff</p>
              <p>on behalf of</p>
              <p>Dr. Ivan Kryven </p>
              <p>Academic Editor</p>
              <p>PLOS ONE</p>
            </body>
          </sub-article>
        </article>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
